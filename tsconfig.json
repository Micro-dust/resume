
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class LogToCsvExtractor {

    public static void main(String[] args) {
        // 假设日志文件都放在这个文件夹里
        String folderPath = "D:/logs";  // 示例路径，换成你实际的文件夹
        File folder = new File(folderPath);

        if (!folder.isDirectory()) {
            System.err.println("指定的路径不是文件夹！");
            return;
        }

        // 获取文件夹中所有后缀为 .log 的文件
        File[] logFiles = folder.listFiles(pathname ->
            pathname.isFile() && pathname.getName().endsWith(".log"));

        if (logFiles == null || logFiles.length == 0) {
            System.out.println("文件夹下没有找到任何 .log 文件。");
            return;
        }

        for (File logFile : logFiles) {
            // 提取文件名最后四位数字并生成对应的 CSV 文件名
            String csvFileName = extractLastFourDigits(logFile.getName()) + ".csv";
            File csvOutput = new File(folder, csvFileName);

            // 用来存储从日志行中提取出来的数据，处理完成后再排序写入
            List<String[]> extractedData = new ArrayList<>();

            try (
                BufferedReader reader = new BufferedReader(
                    new InputStreamReader(
                        new FileInputStream(logFile),
                        StandardCharsets.UTF_8
                    )
                )
            ) {
                System.out.println("处理文件：" + logFile.getAbsolutePath());

                String line;
                boolean isFirstLine = true;
                while ((line = reader.readLine()) != null) {
                    // 跳过第一行
                    if (isFirstLine) {
                        isFirstLine = false;
                        continue;
                    }

                    // 提取【第45个“字节”开始到空白字符之前】的内容
                    String extractedPart = extractPart(line, 45);
                    // 提取行中方括号 [...] 内的内容（仅取第一个）
                    String bracketContent = extractBracketContent(line);

                    // 将结果加入列表，以便后续排序
                    extractedData.add(new String[] { extractedPart, bracketContent });
                }

                // 对 extractedData 进行排序
                extractedData.sort(Comparator.comparing((String[] row) -> row[0] == null ? "" : row[0])
                        .thenComparing(row -> row[1] == null ? "" : row[1]));

                // 全部读完并排序后，再写入 CSV
                try (BufferedWriter writer = new BufferedWriter(
                     new OutputStreamWriter(
                         new FileOutputStream(csvOutput),
                         StandardCharsets.UTF_8)
                )) {
                    for (String[] row : extractedData) {
                        String ep = (row[0] == null) ? "" : row[0];
                        String bc = (row[1] == null) ? "" : row[1];
                        if (!ep.isEmpty() && !bc.isEmpty()) {
                            writer.write(ep + "," + bc);
                        } else if (!ep.isEmpty()) {
                            writer.write(ep);
                        } else if (!bc.isEmpty()) {
                            writer.write(bc);
                        }
                        writer.newLine();
                    }
                }

                System.out.println("已生成排序后的 CSV 文件：" + csvOutput.getAbsolutePath());

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 提取文件名中的最后四位数字
     * @param fileName 原始文件名
     * @return 提取到的最后四位数字，如果未找到，返回 "0000"
     */
    private static String extractLastFourDigits(String fileName) {
        Pattern pattern = Pattern.compile("(\\d{4})\\D*$"); // 匹配最后四位数字
        Matcher matcher = pattern.matcher(fileName);
        if (matcher.find()) {
            return matcher.group(1);
        }
        return "0000"; // 如果没有找到数字，返回默认值
    }

    /**
     * 按“半角=1，全角=2”的规则，从字符串中截取
     * 第 startByte 个“宽度”起，到空白字符(空格、制表符等)之前的内容。
     * 
     * @param line      原始行
     * @param startByte 第几“字节”（这里指自定义的半角=1、全角=2 的计数）
     * @return          截取得到的子串，若无法截取则返回 null
     */
    private static String extractPart(String line, int startByte) {
        if (line == null || line.isEmpty()) {
            return null;
        }
        int startIndex = getCharIndexAtByteWidth(line, startByte);
        if (startIndex < 0 || startIndex >= line.length()) {
            return null;
        }

        // 从 startIndex 开始往后找到空白字符的位置
        int endIndex = startIndex;
        while (endIndex < line.length()) {
            char c = line.charAt(endIndex);
            if (Character.isWhitespace(c)) {
                break;
            }
            endIndex++;
        }

        return line.substring(startIndex, endIndex);
    }

    /**
     * 返回字符串中，对应“第 byteWidth 个宽度”所在的字符索引。
     * 若没到那么长就返回 -1。
     */
    private static int getCharIndexAtByteWidth(String line, int byteWidth) {
        int accumulatedWidth = 0;
        for (int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            // 判断此字符是“半角”还是“全角”
            if (isHalfWidth(c)) {
                accumulatedWidth += 1;
            } else {
                accumulatedWidth += 2;
            }

            if (accumulatedWidth == byteWidth) {
                return i + 1;
            } else if (accumulatedWidth > byteWidth) {
                return i;
            }
        }
        return -1;
    }

    /**
     * 简单判定是否为“半角字符”
     * 如果是 ASCII 范围就当半角，否则当全角。
     */
    private static boolean isHalfWidth(char c) {
        return c >= 0x00 && c < 0x7F;
    }

    /**
     * 提取行中第一个方括号 [...] 中的内容
     */
    private static String extractBracketContent(String line) {
        Pattern pattern = Pattern.compile("\\[(.*?)\\]");
        Matcher matcher = pattern.matcher(line);
        if (matcher.find()) {
            return matcher.group(1);
        }
        return null;
    }
}
