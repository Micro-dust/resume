import java.io.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

public class FileCreatorWithTimeAndPattern {
    public static void main(String[] args) {
        String csvFilePath = "your_csv_file_path.csv"; // 替换为你的 CSV 文件路径
        String specifiedString = "MyString"; // 你指定的字符串
        String basePath = "C:\\test\\"; // 根目录

        try (BufferedReader br = new BufferedReader(new FileReader(csvFilePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length < 4) continue;

                String folderPath = basePath + parts[0].trim().replace("/", "\\");
                String fileNamePattern = parts[1].trim();
                int saveTime = Integer.parseInt(parts[2].trim());
                int mode = Integer.parseInt(parts[3].trim()); // 当前代码暂时未用 mode

                for (int i = 0; i < 4; i++) {
                    int offset = i - 1; // -1, 0, +1, +2
                    createFileWithPattern(folderPath, fileNamePattern, saveTime + offset, specifiedString, offset);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void createFileWithPattern(String folderPath, String fileNamePattern, int daysOffset, String specifiedString, int offset) {
        try {
            // 创建文件夹
            Files.createDirectories(Paths.get(folderPath));

            // 生成日期
            Date currentDate = new Date();
            long millis = currentDate.getTime() - (long) daysOffset * 24 * 60 * 60 * 1000;
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd");
            String dateStr = dateFormat.format(new Date(millis));

            // 生成文件名
            String fileName = generateFileNameWithPattern(fileNamePattern, dateStr, specifiedString);

            // 创建文件
            File file = new File(folderPath, fileName);
            if (!file.exists()) {
                if (file.createNewFile()) {
                    System.out.println("File created: " + file.getAbsolutePath());
                }
            }

            // 修改文件时间
            Path filePath = file.toPath();
            FileTime fileTime = FileTime.fromMillis(millis);
            Files.setAttribute(filePath, "creationTime", fileTime);
            Files.setLastModifiedTime(filePath, fileTime);
            System.out.println("Modified file creation time for: " + file.getAbsolutePath() + " to " + new Date(millis));

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String generateFileNameWithPattern(String pattern, String dateStr, String specifiedString) {
        Random random = new Random();
        StringBuilder result = new StringBuilder();
        boolean firstAsteriskReplaced = false; // 用于标记第一个 * 是否已替换
        int questionMarkCount = 0; // 统计问号数量

        for (char c : pattern.toCharArray()) {
            if (c == '*') {
                if (!firstAsteriskReplaced) {
                    // 第一个 * 替换为指定字符串
                    result.append(specifiedString);
                    firstAsteriskReplaced = true;
                } else {
                    // 第二个及之后的 * 替换为日期字符串
                    result.append(dateStr);
                }
            } else if (c == '?') {
                questionMarkCount++;
                if (questionMarkCount <= 8) {
                    // 前 8 个问号替换为日期字符串的一部分
                    result.append(dateStr.charAt(questionMarkCount - 1));
                } else {
                    // 剩余问号替换为随机数字
                    result.append(random.nextInt(10));
                }
            } else {
                result.append(c);
            }
        }
        return result.toString();
    }
}
